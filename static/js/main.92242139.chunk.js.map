{"version":3,"sources":["item.js","square.js","board.js","index.js"],"names":["Item","height","this","props","y","width","x","cx","cy","r","stroke","strokeWidth","fill","color","React","Component","Square","nextProps","item","type","itemOrBlank","className","onClick","Board","w","h","colors","state","squares","initArray","selected","sz","arr","Array","Math","floor","random","length","no_of_random","excludes","free_square_index_arr","fs","reduce","acc","curr","index","includes","push","console","log","JSON","stringify","i","fs_idx","splice","slice","random_free_square_index","randomFreeSquareIndex","pop","f_idx","findIndex","f","setState","idx","identifier","onSquareClicked","content","j","renderSquare","renderRow","renderRows","Game","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.92242139.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default class Item extends React.Component {\n\n    render() {\n        return (\n            <svg height={this.props.y*2} width={this.props.x*2}>\n                <circle cx={this.props.x} cy={this.props.y} r={this.props.r} stroke=\"black\" strokeWidth=\"1\" fill={this.props.color} />\n            </svg>\n        );\n    }\n}","import React from 'react';\nimport Item from './item';\n\nexport default class Square extends React.Component {\n\n    shouldComponentUpdate(nextProps) {\n        // blank -> blank (no change)\n        if (this.props.item === null && nextProps.item === null) return false\n        // item -> item: compare all sub-properties (type and color) to see if it's the same item\n        if (this.props.item !== null && nextProps.item !== null) {\n            return this.props.item.type !== nextProps.item.type || this.props.item.color !== nextProps.item.color\n        }\n        // item -> blank or blank -> item\n        return true\n    }\n\n    render() {\n        let itemOrBlank\n        if (this.props.item != null) {\n            itemOrBlank = <Item x='22' y='22'\n                color={this.props.item.color}\n                r={this.props.item.type === 'p' ? 15 : 5} />\n        }\n        return (\n            <div className=\"square\"\n                onClick={() => this.props.onClick()}>\n                {itemOrBlank}\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './index.css';\nimport Square from './square.js';\n\nexport default class Board extends React.Component {\n\n    w = 9; h = 9\n    colors = ['#98ddca', '#d5ecc2', '#ffd3b4', '#ffaaa7']\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: this.initArray()\n        };\n        this.selected = null\n    }\n\n    initArray() {\n        const sz = this.w * this.h\n        let arr = Array(sz).fill(null)\n        // Display some random value\n        arr[Math.floor(Math.random() * sz)] = {\n            type: 'p',\n            color: this.colors[Math.floor(Math.random() * this.colors.length)]\n        }\n        arr[Math.floor(Math.random() * sz)] = {\n            type: 'p',\n            color: this.colors[Math.floor(Math.random() * this.colors.length)]\n        }\n        arr[Math.floor(Math.random() * sz)] = {\n            type: 'p',\n            color: this.colors[Math.floor(Math.random() * this.colors.length)]\n        }\n        arr[Math.floor(Math.random() * sz)] = {\n            type: 'p',\n            color: this.colors[Math.floor(Math.random() * this.colors.length)]\n        }\n        arr[Math.floor(Math.random() * sz)] = {\n            type: 'f',\n            color: this.colors[Math.floor(Math.random() * this.colors.length)]\n        }\n        return arr\n    }\n\n    randomFreeSquareIndex(no_of_random, squares, excludes) {\n        let free_square_index_arr = []\n\n        /**\n         * An array contains all blank square's index (no item)\n         * We will generate random positions to render related items based on this array\n         * so that all items are rendered in their own separate square\n         */\n        let fs = squares.reduce((acc, curr, index) => {\n            if (curr === null && !excludes.includes(index)) {\n                acc.push(index);\n            }\n            return acc;\n        }, []);\n        console.log(`Free squares fs: ${JSON.stringify(fs)}`)\n        for (let i = 0; i < no_of_random; i++) {\n\n            // 1. Pick a random index fs_idx of free squares ('fs')\n            // 2. fs[fs_idx] = corresponding index of 'squares' where there's no item occupied (value to return)\n            // 3. Remove element at index free_sqr_idx from free_squares (since it's no longer free)\n\n            const fs_idx = Math.floor(Math.random() * fs.length)\n            free_square_index_arr.push(fs.splice(fs_idx, 1)[0])\n        }\n        return free_square_index_arr\n    }\n\n    onSquareClicked(i) {\n        if (this.state.squares[i] !== null && this.state.squares[i].type === 'p') {\n            // Detect attempt to move item from this square to another square\n            this.selected = i\n        } else if (this.selected != null) {\n\n            const squares = this.state.squares.slice();\n\n            let random_free_square_index = null\n\n            /** \n             * A blank square has just been selected as a move-to destination\n             * Remove item from previous square saved in 'selected' state\n             * Add item to newly selected square\n             * Refresh board's state so that related items are re-rendered\n             */\n\n            // Resolve 'f' item\n            if (squares[i] && squares[i].type === 'f') {\n                /**\n                 * This square is occupied by existing item due to user's move\n                 * before future item can acquire it\n                 * Render future item at another random square as 'p' (present) item\n                 */\n                random_free_square_index = this.randomFreeSquareIndex(2, squares, [i, this.selected])\n                squares[random_free_square_index.pop()] = {\n                    type: 'p',\n                    color: squares[i].color\n                }\n            } else {\n                /** No conflict related to 'f' item. Render full size */\n                const f_idx = squares.findIndex(f => f && f.type === 'f')\n                if (f_idx >= 0) {\n                    squares[f_idx] = {\n                        type: 'p',\n                        color: squares[f_idx].color\n                    }\n                }\n                random_free_square_index = this.randomFreeSquareIndex(1, squares, [i, this.selected])\n            }\n            // Create a new 'f' (future) item (small item) at another random position\n            squares[random_free_square_index.pop()] = {\n                type: 'f',\n                color: this.colors[Math.floor(Math.random() * this.colors.length)]\n            }\n            squares[i] = squares[this.selected]\n            squares[this.selected] = null\n            this.selected = null\n            this.setState({ squares: squares })\n        } else {\n            // A blank square has just been selected but no revious item selection \n            // recorded in board's state\n            // Ignore this click event\n            this.selected = null\n        }\n    }\n\n    renderSquare(idx) {\n        return <Square key={idx} identifier={idx} item={this.state.squares[idx]} onClick={() => this.onSquareClicked(idx)} />;\n    }\n\n    renderRow(i) {\n        let content = []\n        for (let j = 0; j < this.w; ++j) {\n            const idx = i * this.w + j\n            content.push(this.renderSquare(idx))\n        }\n        return (\n            <div className=\"board-row\" key={`row_${i}`}>\n                {content}\n            </div>\n        )\n    }\n\n    renderRows() {\n        let content = [];\n        for (let i = 0; i < this.h; i++) {\n            content.push(this.renderRow(i));\n        }\n        return content\n    }\n\n    render() {\n        return (\n            <div>\n                {this.renderRows()}\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Board from './board.js'\n\nclass Game extends React.Component {\n    render() {\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board />\n                </div>\n                <div className=\"game-info\">\n                    <div>{/* status */}</div>\n                    <ol>{/* TODO */}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}